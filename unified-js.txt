/**
 * =====================================================
 * SAKARYA BÜYÜKŞEHİR BELEDİYESİ - BİLGİ İŞLEM
 * Birleştirilmiş JavaScript Dosyası
 * =====================================================
 */

// =================================================================================
// 1. GENEL UTILITY FONKSİYONLARI
// =================================================================================

/**
 * Sayfa yüklenme durumunu kontrol eden utility sınıfı
 */
class PageUtils {
    static init() {
        this.setupSmoothScrolling();
        this.setupNavbarActiveStates();
        this.setupBackToTop();
        this.setupLazyLoading();
        this.setupAccessibility();
    }

    /**
     * Smooth scrolling özelliği
     */
    static setupSmoothScrolling() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    /**
     * Navbar aktif durumları
     */
    static setupNavbarActiveStates() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        const navLinks = document.querySelectorAll('.nav-link');
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === currentPage) {
                link.classList.add('active');
            }
        });
    }

    /**
     * Yukarı çık butonu
     */
    static setupBackToTop() {
        // Back to top butonu oluştur
        const backToTopBtn = document.createElement('button');
        backToTopBtn.innerHTML = '↑';
        backToTopBtn.className = 'back-to-top';
        backToTopBtn.style.cssText = `
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(45deg, #0d6efd, #0b5ed7);
            color: white;
            border: none;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            display: none;
            z-index: 1000;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(13, 110, 253, 0.3);
        `;
        
        document.body.appendChild(backToTopBtn);

        // Scroll olayını dinle
        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                backToTopBtn.style.display = 'block';
            } else {
                backToTopBtn.style.display = 'none';
            }
        });

        // Tıklama olayı
        backToTopBtn.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        // Hover efekti
        backToTopBtn.addEventListener('mouseenter', () => {
            backToTopBtn.style.transform = 'scale(1.1) translateY(-2px)';
        });

        backToTopBtn.addEventListener('mouseleave', () => {
            backToTopBtn.style.transform = 'scale(1) translateY(0)';
        });
    }

    /**
     * Lazy loading setup
     */
    static setupLazyLoading() {
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                            img.removeAttribute('data-src');
                            img.classList.remove('lazy');
                            observer.unobserve(img);
                        }
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '50px 0px'
            });

            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        }
    }

    /**
     * Accessibility iyileştirmeleri
     */
    static setupAccessibility() {
        // Focus görünürlüğü
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                document.body.classList.add('using-keyboard');
            }
        });

        document.addEventListener('mousedown', () => {
            document.body.classList.remove('using-keyboard');
        });

        // Skip to main content linki
        const skipLink = document.createElement('a');
        skipLink.href = '#main-content';
        skipLink.textContent = 'Ana içeriğe geç';
        skipLink.className = 'skip-link';
        skipLink.style.cssText = `
            position: absolute;
            top: -40px;
            left: 6px;
            background: #000;
            color: #fff;
            padding: 8px;
            text-decoration: none;
            border-radius: 4px;
            z-index: 9999;
            transition: top 0.3s;
        `;

        skipLink.addEventListener('focus', () => {
            skipLink.style.top = '6px';
        });

        skipLink.addEventListener('blur', () => {
            skipLink.style.top = '-40px';
        });

        document.body.insertBefore(skipLink, document.body.firstChild);
    }

    /**
     * Performance monitoring
     */
    static monitorPerformance() {
        if ('performance' in window) {
            window.addEventListener('load', () => {
                setTimeout(() => {
                    const perfData = performance.getEntriesByType('navigation')[0];
                    console.log('Sayfa yüklenme süresi:', perfData.loadEventEnd - perfData.loadEventStart, 'ms');
                }, 0);
            });
        }
    }
}

// =================================================================================
// 2. GALERİ YÖNETİM SINIFI
// =================================================================================

/**
 * Galeri işlemlerini yöneten sınıf
 */
class GalleryManager {
    constructor() {
        this.currentImageIndex = 0;
        this.images = [];
        this.modal = null;
        this.modalImage = null;
        this.modalTitle = null;
        this.modalDescription = null;
        this.loading = null;
        this.touchStartX = 0;
        this.touchEndX = 0;
        
        this.init();
    }
    
    init() {
        // Modal elementlerini al
        this.modal = document.getElementById('imageModal');
        if (!this.modal) return; // Galeri sayfası değilse çık
        
        this.modalImage = document.getElementById('modalImage');
        this.modalTitle = document.getElementById('modalTitle');
        this.modalDescription = document.getElementById('modalDescription');
        this.loading = document.getElementById('loading');
        
        // Tüm tıklanabilir resimleri topla
        this.collectImages();
        
        // Event listener'ları ekle
        this.addEventListeners();
        
        // Carousel otomatik oynatma kontrolü
        this.setupCarouselControls();
        
        // Touch desteği ekle
        this.setupTouchControls();
        
        // Preloading
        this.preloadImages();
    }
    
    collectImages() {
        // Hem carousel hem de grid'deki resimleri topla
        const clickableImages = document.querySelectorAll('[data-bs-toggle="modal"][data-image]');
        
        this.images = Array.from(clickableImages).map((img, index) => ({
            element: img,
            image: img.dataset.image,
            title: img.dataset.title,
            description: img.dataset.description,
            index: index
        }));
    }
    
    addEventListeners() {
        // Modal açılma eventi
        this.modal.addEventListener('show.bs.modal', (e) => {
            const trigger = e.relatedTarget;
            this.currentImageIndex = this.images.findIndex(img => img.element === trigger);
            this.showImage(this.currentImageIndex);
        });
        
        // Navigation butonları
        const prevBtn = document.getElementById('prevImage');
        const nextBtn = document.getElementById('nextImage');
        
        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.previousImage());
        }
        
        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextImage());
        }
        
        // Klavye navigasyonu
        document.addEventListener('keydown', (e) => {
            if (this.modal && this.modal.classList.contains('show')) {
                switch(e.key) {
                    case 'ArrowLeft':
                        e.preventDefault();
                        this.previousImage();
                        break;
                    case 'ArrowRight':
                        e.preventDefault();
                        this.nextImage();
                        break;
                    case 'Escape':
                        bootstrap.Modal.getInstance(this.modal).hide();
                        break;
                }
            }
        });
        
        // Modal image yükleme eventi
        if (this.modalImage) {
            this.modalImage.addEventListener('load', () => {
                this.hideLoading();
            });
            
            this.modalImage.addEventListener('error', () => {
                this.hideLoading();
                this.modalImage.alt = 'Resim yüklenemedi';
                this.showError('Resim yüklenemedi');
            });
        }
        
        // Modal kapanma animasyonu
        this.modal.addEventListener('hidden.bs.modal', () => {
            this.resetModal();
        });
    }
    
    setupTouchControls() {
        if (!this.modalImage) return;
        
        this.modalImage.addEventListener('touchstart', (e) => {
            this.touchStartX = e.changedTouches[0].screenX;
        });
        
        this.modalImage.addEventListener('touchend', (e) => {
            this.touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe();
        });
    }
    
    handleSwipe() {
        const swipeThreshold = 50;
        const diff = this.touchStartX - this.touchEndX;
        
        if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
                // Sola kaydırma - sonraki resim
                this.nextImage();
            } else {
                // Sağa kaydırma - önceki resim
                this.previousImage();
            }
        }
    }
    
    showImage(index) {
        if (index < 0 || index >= this.images.length) return;
        
        this.showLoading();
        
        const imageData = this.images[index];
        
        // Resim bilgilerini güncelle
        if (this.modalImage) {
            this.modalImage.src = imageData.image;
            this.modalImage.alt = imageData.title;
        }
        
        if (this.modalTitle) {
            this.modalTitle.textContent = imageData.title;
        }
        
        if (this.modalDescription) {
            this.modalDescription.textContent = imageData.description;
        }
        
        this.currentImageIndex = index;
        
        // Navigation butonlarının durumunu güncelle
        this.updateNavigationButtons();
        
        // URL'yi güncelle (history API)
        if (window.history && window.history.pushState) {
            const newUrl = new URL(window.location);
            newUrl.searchParams.set('image', index);
            window.history.replaceState({}, '', newUrl);
        }
    }
    
    updateNavigationButtons() {
        const prevBtn = document.getElementById('prevImage');
        const nextBtn = document.getElementById('nextImage');
        
        if (prevBtn) {
            prevBtn.style.opacity = this.currentImageIndex === 0 ? '0.5' : '1';
            prevBtn.disabled = this.currentImageIndex === 0;
        }
        
        if (nextBtn) {
            nextBtn.style.opacity = this.currentImageIndex === this.images.length - 1 ? '0.5' : '1';
            nextBtn.disabled = this.currentImageIndex === this.images.length - 1;
        }
    }
    
    nextImage() {
        if (this.currentImageIndex < this.images.length - 1) {
            this.showImage(this.currentImageIndex + 1);
        }
    }
    
    previousImage() {
        if (this.currentImageIndex > 0) {
            this.showImage(this.currentImageIndex - 1);
        }
    }
    
    showLoading() {
        if (this.loading) {
            this.loading.style.display = 'block';
        }
        if (this.modalImage) {
            this.modalImage.style.opacity = '0.5';
        }
    }
    
    hideLoading() {
        if (this.loading) {
            this.loading.style.display = 'none';
        }
        if (this.modalImage) {
            this.modalImage.style.opacity = '1';
        }
    }
    
    showError(message) {
        // Error mesajı göster
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger';
        errorDiv.textContent = message;
        errorDiv.style.cssText = `
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1060;
        `;
        
        this.modal.querySelector('.modal-body').appendChild(errorDiv);
        
        setTimeout(() => {
            errorDiv.remove();
        }, 3000);
    }
    
    resetModal() {
        if (this.modalImage) {
            this.modalImage.src = '';
            this.modalImage.style.opacity = '1';
        }
        
        if (this.loading) {
            this.loading.style.display = 'none';
        }
        
        // URL'den image parametresini kaldır
        if (window.history) {
            const newUrl = new URL(window.location);
            newUrl.searchParams.delete('image');
            window.history.replaceState({}, '', newUrl);
        }
    }
    
    preloadImages() {
        // İlk 3 resmi preload et
        const preloadCount = Math.min(3, this.images.length);
        for (let i = 0; i < preloadCount; i++) {
            const img = new Image();
            img.src = this.images[i].image;
        }
    }
    
    setupCarouselControls() {
        const carouselElement = document.getElementById('galleryCarousel');
        if (!carouselElement) return;
        
        const carousel = new bootstrap.Carousel(carouselElement, {
            interval: 5000,
            pause: 'hover'
        });
        
        // Carousel olaylarını dinle
        carouselElement.addEventListener('slide.bs.carousel', (e) => {
            // Geçiş animasyonu sırasında loading göster
            const nextImg = e.relatedTarget.querySelector('img');
            if (nextImg && !nextImg.complete) {
                this.showLoading();
            }
        });
        
        carouselElement.addEventListener('slid.bs.carousel', () => {
            this.hideLoading();
        });
        
        // Mouse ile hover yapınca durdur
        carouselElement.addEventListener('mouseenter', () => {
            carousel.pause();
        });
        
        // Mouse ayrılınca devam ettir
        carouselElement.addEventListener('mouseleave', () => {
            carousel.cycle();
        });
        
        // Touch desteği
        let startX = 0;
        let endX = 0;
        
        carouselElement.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
        });
        
        carouselElement.addEventListener('touchend', (e) => {
            endX = e.changedTouches[0].clientX;
            const diff = startX - endX;
            
            if (Math.abs(diff) > 50) {
                if (diff > 0) {
                    carousel.next();
                } else {
                    carousel.prev();
                }
            }
        });
    }
}

// =================================================================================
// 3. İLETİŞİM FORMU VALİDASYON SINIFI
// =================================================================================

/**
 * Form validasyon işlemlerini yöneten sınıf
 */
class FormValidator {
    constructor(formId) {
        this.form = document.getElementById(formId);
        this.fields = {};
        this.isSubmitting = false;
        
        if (!this.form) {
            return; // Form yoksa sınıfı başlatma
        }
        
        this.init();
    }
    
    init() {
        this.setupFields();
        this.setupEventListeners();
        this.setupPhoneMask();
        this.setupCharCounter();
        this.setupAutoSave();
    }
    
    setupFields() {
        // Validasyon kurallarını tanımla
        this.fields = {
            firstName: {
                element: document.getElementById('firstName'),
                rules: ['required', 'minLength:2', 'maxLength:50', 'noNumbers'],
                messages: {
                    required: 'Ad alanı zorunludur',
                    minLength: 'Ad en az 2 karakter olmalıdır',
                    maxLength: 'Ad en fazla 50 karakter olabilir',
                    noNumbers: 'Ad sadece harflerden oluşmalıdır'
                }
            },
            lastName: {
                element: document.getElementById('lastName'),
                rules: ['required', 'minLength:2', 'maxLength:50', 'noNumbers'],
                messages: {
                    required: 'Soyad alanı zorunludur',
                    minLength: 'Soyad en az 2 karakter olmalıdır',
                    maxLength: 'Soyad en fazla 50 karakter olabilir',
                    noNumbers: 'Soyad sadece harflerden oluşmalıdır'
                }
            },
            email: {
                element: document.getElementById('email'),
                rules: ['required', 'email'],
                messages: {
                    required: 'E-posta adresi zorunludur',
                    email: 'Geçerli bir e-posta adresi giriniz'
                }
            },
            phone: {
                element: document.getElementById('phone'),
                rules: ['phone'],
                messages: {
                    phone: 'Geçerli bir telefon numarası giriniz (5XX XXX XX XX)'
                }
            },
            subject: {
                element: document.getElementById('subject'),
                rules: ['required'],
                messages: {
                    required: 'Lütfen bir konu seçiniz'
                }
            },
            message: {
                element: document.getElementById('message'),
                rules: ['required', 'minLength:10', 'maxLength:1000'],
                messages: {
                    required: 'Mesaj alanı zorunludur',
                    minLength: 'Mesaj en az 10 karakter olmalıdır',
                    maxLength: 'Mesaj en fazla 1000 karakter olabilir'
                }
            },
            privacy: {
                element: document.getElementById('privacy'),
                rules: ['required'],
                messages: {
                    required: 'Kişisel verilerin korunması hakkındaki bilgilendirmeyi kabul etmelisiniz'
                }
            }
        };
    }
    
    setupEventListeners() {
        // Her field için olay dinleyicileri
        Object.keys(this.fields).forEach(fieldName => {
            const field = this.fields[fieldName];
            if (field.element) {
                // Real-time validasyon
                field.element.addEventListener('blur', () => {
                    this.validateField(fieldName);
                });
                
                field.element.addEventListener('input', () => {
                    // Hatalı fieldları temizle
                    if (field.element.classList.contains('is-invalid')) {
                        this.validateField(fieldName);
                    }
                    
                    // Auto-save
                    this.autoSave();
                });
            }
        });
        
        // Form submit
        this.form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSubmit();
        });
        
        // Form reset
        const resetBtn = this.form.querySelector('[type="reset"]');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                this.clearAllValidations();
                this.clearAutoSave();
            });
        }
    }
    
    setupPhoneMask() {
        const phoneInput = document.getElementById('phone');
        if (phoneInput) {
            phoneInput.addEventListener('input', (e) => {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 0) {
                    if (value.length <= 3) {
                        value = `(${value}`;
                    } else if (value.length <= 6) {
                        value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
                    } else if (value.length <= 8) {
                        value = `(${value.slice(0, 3)}) ${value.slice(3, 6)} ${value.slice(6)}`;
                    } else {
                        value = `(${value.slice(0, 3)}) ${value.slice(3, 6)} ${value.slice(6, 8)} ${value.slice(8, 10)}`;
                    }
                }
                e.target.value = value;
            });
            
            // Paste olayını da handle et
            phoneInput.addEventListener('paste', (e) => {
                setTimeout(() => {
                    phoneInput.dispatchEvent(new Event('input'));
                }, 0);
            });
        }
    }
    
    setupCharCounter() {
        const messageInput = document.getElementById('message');
        const charCount = document.getElementById('charCount');
        
        if (messageInput && charCount) {
            const updateCharCount = () => {
                const count = messageInput.value.length;
                charCount.textContent = count;
                
                // Renk değişimleri
                charCount.parentElement.classList.remove('warning', 'danger');
                if (count > 800) {
                    charCount.parentElement.classList.add('danger');
                } else if (count > 600) {
                    charCount.parentElement.classList.add('warning');
                }
                
                // Progress bar
                const percentage = (count / 1000) * 100;
                let progressBar = charCount.parentElement.querySelector('.char-progress');
                if (!progressBar) {
                    progressBar = document.createElement('div');
                    progressBar.className = 'char-progress';
                    progressBar.style.cssText = `
                        width: 100%;
                        height: 2px;
                        background: #e9ecef;
                        border-radius: 1px;
                        margin-top: 3px;
                        overflow: hidden;
                    `;
                    
                    const progressFill = document.createElement('div');
                    progressFill.className = 'char-progress-fill';
                    progressFill.style.cssText = `
                        height: 100%;
                        background: linear-gradient(90deg, #28a745, #ffc107, #dc3545);
                        transition: width 0.3s ease;
                        width: 0%;
                    `;
                    
                    progressBar.appendChild(progressFill);
                    charCount.parentElement.appendChild(progressBar);
                }
                
                const progressFill = progressBar.querySelector('.char-progress-fill');
                progressFill.style.width = `${Math.min(percentage, 100)}%`;
            };
            
            messageInput.addEventListener('input', updateCharCount);
            updateCharCount(); // İlk yükleme
        }
    }
    
    setupAutoSave() {
        this.autoSaveTimer = null;
    }
    
    autoSave() {
        if (this.autoSaveTimer) {
            clearTimeout(this.autoSaveTimer);
        }
        
        this.autoSaveTimer = setTimeout(() => {
            const formData = this.getFormData();
            localStorage.setItem('contact_form_draft', JSON.stringify(formData));
        }, 1000);
    }
    
    loadAutoSave() {
        const saved = localStorage.getItem('contact_form_draft');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                Object.keys(data).forEach(key => {
                    const field = this.fields[key];
                    if (field && field.element && data[key]) {
                        if (field.element.type === 'checkbox') {
                            field.element.checked = data[key];
                        } else {
                            field.element.value = data[key];
                        }
                    }
                });
                
                // Char counter'ı güncelle
                const messageInput = document.getElementById('message');
                if (messageInput) {
                    messageInput.dispatchEvent(new Event('input'));
                }
            } catch (e) {
                console.warn('Auto-save verisi yüklenemedi:', e);
            }
        }
    }
    
    clearAutoSave() {
        localStorage.removeItem('contact_form_draft');
    }
    
    getFormData() {
        const data = {};
        Object.keys(this.fields).forEach(key => {
            const field = this.fields[key];
            if (field && field.element) {
                if (field.element.type === 'checkbox') {
                    data[key] = field.element.checked;
                } else {
                    data[key] = field.element.value;
                }
            }
        });
        return data;
    }
    
    validateField(fieldName) {
        const field = this.fields[fieldName];
        if (!field || !field.element) return true;
        
        const value = field.element.type === 'checkbox' ? field.element.checked : field.element.value.trim();
        let isValid = true;
        let errorMessage = '';
        
        // Kuralları kontrol et
        for (const rule of field.rules) {
            const [ruleName, ruleValue] = rule.split(':');
            
            switch (ruleName) {
                case 'required':
                    if (field.element.type === 'checkbox') {
                        isValid = value === true;
                    } else {
                        isValid = value !== '';
                    }
                    if (!isValid) errorMessage = field.messages.required;
                    break;
                    
                case 'email':
                    if (value !== '') {
                        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                        isValid = emailRegex.test(value);
                        if (!isValid) errorMessage = field.messages.email;
                    }
                    break;
                    
                case 'phone':
                    if (value !== '') {
                        const phoneRegex = /^\(\d{3}\) \d{3} \d{2} \d{2}$/;
                        isValid = phoneRegex.test(value);
                        if (!isValid) errorMessage = field.messages.phone;
                    }
                    break;
                    
                case 'minLength':
                    if (value !== '' && value.length < parseInt(ruleValue)) {
                        isValid = false;
                        errorMessage = field.messages.minLength;
                    }
                    break;
                    
                case 'maxLength':
                    if (value.length > parseInt(ruleValue)) {
                        isValid = false;
                        errorMessage = field.messages.maxLength;
                    }
                    break;
                    
                case 'noNumbers':
                    if (value !== '') {
                        const noNumbersRegex = /^[a-zA-ZçğıöşüÇĞIİÖŞÜ\s]+$/;
                        isValid = noNumbersRegex.test(value);
                        if (!isValid) errorMessage = field.messages.noNumbers;
                    }
                    break;
            }
            
            if (!isValid) break;
        }
        
        this.showFieldResult(fieldName, isValid, errorMessage);
        return isValid;
    }
    
    showFieldResult(fieldName, isValid, errorMessage) {
        const field = this.fields[fieldName];
        const errorElement = document.querySelector(`[data-field="${fieldName}"].error-message`);
        const successElement = document.querySelector(`[data-field="${fieldName}"].success-message`);
        
        // CSS sınıflarını güncelle
        field.element.classList.remove('is-valid', 'is-invalid');
        field.element.classList.add(isValid ? 'is-valid' : 'is-invalid');
        
        // Mesajları göster/gizle
        if (errorElement) {
            errorElement.textContent = errorMessage;
            errorElement.classList.toggle('show', !isValid && errorMessage !== '');
        }
        
        if (successElement) {
            successElement.classList.toggle('show', isValid && field.element.value.trim() !== '');
        }
        
        // Accessibility
        field.element.setAttribute('aria-invalid', !isValid);
        if (errorElement && !isValid) {
            field.element.setAttribute('aria-describedby', errorElement.id || `${fieldName}-error`);
        }
    }
    
    validateAllFields() {
        let isFormValid = true;
        
        Object.keys(this.fields).forEach(fieldName => {
            const fieldValid = this.validateField(fieldName);
            if (!fieldValid) {
                isFormValid = false;
            }
        });
        
        return isFormValid;
    }
    
    async handleSubmit() {
        if (this.isSubmitting) return;
        
        const isValid = this.validateAllFields();
        
        if (!isValid) {